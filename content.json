{"pages":[{"title":"书单","date":"2017-11-29T08:30:03.931Z","updated":"2017-11-28T13:15:42.914Z","comments":false,"path":"books/index.html","permalink":"http://www.wanghongbin.top/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2017-11-29T08:40:46.759Z","updated":"2017-11-28T13:15:42.915Z","comments":false,"path":"categories/index.html","permalink":"http://www.wanghongbin.top/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2017-11-29T08:40:56.043Z","updated":"2017-11-28T13:15:42.917Z","comments":true,"path":"links/index.html","permalink":"http://www.wanghongbin.top/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2017-11-29T08:40:20.215Z","updated":"2017-11-28T13:15:42.919Z","comments":false,"path":"repository/index.html","permalink":"http://www.wanghongbin.top/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2017-11-28T13:15:42.920Z","updated":"2017-11-28T13:15:42.920Z","comments":false,"path":"tags/index.html","permalink":"http://www.wanghongbin.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Spring Data JPA分页和排序","slug":"Spring Data JPA分页和排序","date":"2017-12-30T03:36:09.000Z","updated":"2018-01-01T13:38:26.127Z","comments":true,"path":"2017/12/30/Spring Data JPA分页和排序/","link":"","permalink":"http://www.wanghongbin.top/2017/12/30/Spring Data JPA分页和排序/","excerpt":"","text":"Sort类和Pageable类介绍PagingAndSortingRepository是Spring Data JPA实现分页的接口：1234567public interface PagingAndSortingRepository&lt;T, ID extends Serializable&gt; extends CrudRepository&lt;T, ID&gt; &#123; Iterable&lt;T&gt; findAll(Sort var1); Page&lt;T&gt; findAll(Pageable var1);&#125;第二个findAll方法就是实现分页的方法，参数是Pageable类型，同参数传入当前的分页对象(如:第几页，每页多少条记录，排序信息等)，查询完成之后会返回一个Page的对象。Page对象中就存储了所有的分页信息。Pageable接口的定义如下：1234567891011121314151617public interface Pageable &#123; int getPageNumber(); int getPageSize(); int getOffset(); Sort getSort(); Pageable next(); Pageable previousOrFirst(); Pageable first(); boolean hasPrevious();&#125;它的实现类有三个，主要用到的是PageRequest,PageRequest有三个构造方法：12345678910111213141516171819202122/** * 这个构造出来的分页对象不具备排序功能 * 特别注意页数是从0开始的，而不是1 * @param page zero-based page index. * @param size the size of the page to be returned. */public PageRequest(int page, int size) &#123; this(page, size, null);&#125;/** * Direction和properties用来做排序操作 */public PageRequest(int page, int size, Direction direction, String... properties) &#123; this(page, size, new Sort(direction, properties));&#125;/** * 自定义一个排序的操作 */public PageRequest(int page, int size, Sort sort) &#123; super(page, size); this.sort = sort;&#125;Sort是一排序类，首先有一个内部枚举对象Direction,Direction中有两个值ASC和DESC分别用来确定升序还是降序，Sort还有一个内部类Order，Order有有两个比较重要的属性Sort.Direction和property,第一个用来确定排序的方向，第二个就是排序的属性。Sort主要用到如下两个构造函数：12345//可以输入多个Sort.Order对象，在进行多个值排序时有用public Sort(Sort.Order... orders)//当排序方向固定时，使用这个比较方便，第一个参数是排序方向，第二个是排序的字段，public Sort(Sort.Direction direction, String... properties)分页排序查询e.g. 每页5条，取第1页，按id降序123456789101112131415@Testpublic void testPageAndSort()&#123; Sort sort = new Sort(Sort.Direction.DESC, \"id\"); //页数index是从0开始的，而不是1 Pageable pageable = new PageRequest(0, 5, sort); Page&lt;User&gt; users = repository.findAll(pageable); System.out.println(\"总页数：\" + users.getTotalPages()); System.out.println(\"总记录数：\" + users.getTotalElements()); System.out.println(\"当前第几页：\" + users.getNumber()+1); System.out.println(\"当前页面的集合：\" + users.getContent()); System.out.println(\"当前页面的记录数：\" + users.getNumberOfElements());&#125;使用JpaSpecificationExecutor接口实现条件查询Criteria查询是一种以更加面向对象的方式查询数据库的方法，是JPA 2.0 引入的关键特性之一。e.g. 每页5条，取第1页，按id降序，名字含有D 且 年龄大于1812public interface UserRepository extends JpaRepository&lt;User, Integer&gt;, JpaSpecificationExecutor&lt;User&gt;&#123; &#125;123456789101112131415161718192021222324252627282930313233@Testpublic void testSpecificationExecutor()&#123; Sort sort = new Sort(Sort.Direction.DESC, \"id\"); //页数index是从0开始的，而不是1 Pageable pageable = new PageRequest(0, 5, sort); /** * root：简单看成就是要查询的对象类型(User) * query：添加查询条件 * cb：构建Predicate */ Specification&lt;User&gt; specification = new Specification&lt;User&gt;() &#123; @Override public Predicate toPredicate(Root&lt;User&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb) &#123; //root.get(\"name\")表示获取name这个字段名称, //like表示执行like查询, %D% 表示值,注意要带上% Predicate p1 = cb.like(root.get(\"name\"), \"%D%\"); Predicate p2 = cb.greaterThan(root.get(\"age\"),20); return cb.and(p1, p2); &#125; &#125;; Page&lt;User&gt; users = repository.findAll(specification, pageable); System.out.println(\"总页数：\" + users.getTotalPages()); System.out.println(\"总记录数：\" + users.getTotalElements()); System.out.println(\"当前第几页：\" + users.getNumber()+1); System.out.println(\"当前页面的集合：\" + users.getContent()); System.out.println(\"当前页面的记录数：\" + users.getNumberOfElements());&#125;参考链接https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.core-concepts","categories":[{"name":"后端开发","slug":"后端开发","permalink":"http://www.wanghongbin.top/categories/后端开发/"}],"tags":[{"name":"Spring Data JPA","slug":"Spring-Data-JPA","permalink":"http://www.wanghongbin.top/tags/Spring-Data-JPA/"}]},{"title":"Spring Data JPA相关接口介绍及简单应用","slug":"Spring Data JPA相关接口介绍及简单应用","date":"2017-12-28T03:36:09.000Z","updated":"2018-01-07T15:16:11.958Z","comments":true,"path":"2017/12/28/Spring Data JPA相关接口介绍及简单应用/","link":"","permalink":"http://www.wanghongbin.top/2017/12/28/Spring Data JPA相关接口介绍及简单应用/","excerpt":"","text":"Repository接口及其子接口介绍Repository接口接口定义：12public interface Repository&lt;T, ID extends Serializable&gt; &#123;&#125;Repository接口是一个空接口，这个接口主要作为一个标记接口来捕获类型的工作，并帮助你发现继承这个接口的接口。CrudRepository接口CrudRepository接口继承Repository接口，实现了CRUD相关方法：123456789101112131415public interface CrudRepository&lt;T, ID extends Serializable&gt; extends Repository&lt;T, ID&gt; &#123; &lt;S extends T&gt; S save(S var1); T findOne(ID var1); boolean exists(ID var1); Iterable&lt;T&gt; findAll(); long count(); void delete(T entity); // … more functionality omitted.&#125;PagingAndSortingRepository接口PagingAndSortingRepository接口继承CrudRepository接口，实现了分页排序相关的方法：1234567public interface PagingAndSortingRepository&lt;T, ID extends Serializable&gt; extends CrudRepository&lt;T, ID&gt; &#123; Iterable&lt;T&gt; findAll(Sort var1); Page&lt;T&gt; findAll(Pageable var1);&#125;JpaRepository接口JpaRepository接口继承PagingAndSortingRepository接口，实现了JPA规范的相关方法：123456789101112131415public interface JpaRepository&lt;T, ID extends Serializable&gt; extends PagingAndSortingRepository&lt;T, ID&gt;, QueryByExampleExecutor&lt;T&gt; &#123; List&lt;T&gt; findAll(Sort var1); &lt;S extends T&gt; List&lt;S&gt; save(Iterable&lt;S&gt; var1); void flush(); &lt;S extends T&gt; S saveAndFlush(S var1); void deleteInBatch(Iterable&lt;T&gt; var1); // … more functionality omitted.&#125;使用方法命名规则查询Spring Data JPA支持以特定的方法命名规则来生成查询。下面是对JPA支持的关键字的概述，以及包含该关键字翻译成的sql片段。KeywordSampleJPQL snippetAndfindByLastnameAndFirstname… where x.lastname = ?1 and x.firstname = ?2OrfindByLastnameOrFirstname… where x.lastname = ?1 or x.firstname = ?2Is,EqualsfindByFirstname,findByFirstnameIs,findByFirstnameEquals… where x.firstname = ?1BetweenfindByStartDateBetween… where x.startDate between ?1 and ?2LessThanfindByAgeLessThan… where x.age &lt; ?1LessThanEqualfindByAgeLessThanEqual… where x.age &lt;= ?1GreaterThanfindByAgeGreaterThan… where x.age &gt; ?1GreaterThanEqualfindByAgeGreaterThanEqual… where x.age &gt;= ?1AfterfindByStartDateAfter… where x.startDate &gt; ?1BeforefindByStartDateBefore… where x.startDate &lt; ?1IsNullfindByAgeIsNull… where x.age is nullIsNotNull,NotNullfindByAge(Is)NotNull… where x.age not nullLikefindByFirstnameLike… where x.firstname like ?1NotLikefindByFirstnameNotLike… where x.firstname not like ?1StartingWithfindByFirstnameStartingWith… where x.firstname like ?1EndingWithfindByFirstnameEndingWith… where x.firstname like ?1ContainingfindByFirstnameContaining… where x.firstname like ?1OrderByfindByAgeOrderByLastnameDesc… where x.age = ?1 order by x.lastname descNotfindByLastnameNot… where x.lastname &lt;&gt; ?1InfindByAgeIn(Collection&lt;Age&gt; ages)… where x.age in ?1NotInfindByAgeNotIn(Collection&lt;Age&gt; ages)… where x.age not in ?1TruefindByActiveTrue()… where x.active = trueFalsefindByActiveFalse()… where x.active = falseIgnoreCasefindByFirstnameIgnoreCase… where UPPER(x.firstame) = UPPER(?1)In和NotIn可以将Collection的任何子类作为参数以及数组或可变参数。例子：12345678public interface UserRepository extends Repository&lt;User, Long&gt; &#123; List&lt;User&gt; findByEmailAddressAndLastname(String emailAddress, String lastname); // where name like ?% and age &lt;? List&lt;User&gt; findByNameStartingWithAndAgeLessThan(String name, Integer age); // where name in (?,?....) or age &lt;? List&lt;User&gt; findByNameInOrAgeLessThan(List&lt;String&gt; names, Integer age);&#125;使用按照方法命名规则，有弊端：方法名会比较长： 约定大于配置对于一些复杂的查询，是很难实现使用@Query注解对查询方法进行注释的查询优先于使用@NamedQuery定义的查询或者在orm.xml中声明的命名查询。123456789101112131415public interface UserRepository extends JpaRepository&lt;User, Long&gt; &#123; //占位符的方式 @Query(\"select u from User u where u.firstname = ?1 or u.lastname = ?2\") User findByLastnameOrFirstname(String lastname, String firstname); //命名参数的方式 @Query(\"select u from User u where u.firstname = :firstname or u.lastname = :lastname\") User findByLastnameOrFirstname(@Param(\"lastname\") String lastname, @Param(\"firstname\") String firstname); //使用@Query手动定义查询,允许在查询定义内定义高级LIKE表达式。 @Query(\"select u from User u where u.firstname like %?1\") List&lt;User&gt; findByFirstnameEndsWith(String firstname);&#125;@Query注释允许通过将nativeQuery设置为true来执行原生sql查询。12345public interface UserRepository extends JpaRepository&lt;User, Long&gt; &#123; @Query(value = \"SELECT * FROM USERS WHERE EMAIL_ADDRESS = ?1\", nativeQuery = true) User findByEmailAddress(String emailAddress);&#125;@Query、@Modifying、@Transactional综合使用使用@Query执行更新操作需要配合@Modifying注解和@Transactional注解。事务一般在service层控制。123456789101112131415161718192021interface UserRepository extends Repository&lt;User, Long&gt; &#123; @Modifying @Query(\"update User u set u.firstname = ?1 where u.lastname = ?2\") int setFixedFirstnameFor(String firstname, String lastname); @Modifying @Query(\"delete from User u where user.role.id = ?1\") void deleteInBulkByRoleId(long roleId);&#125;public class UserService &#123; @Autowired private UserRepository userRepository; @Transactional public int setAge(Integer age, Integer id)&#123; return userRepository.setFixedFirstnameFor(age, id); &#125;&#125;参考链接https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#reference","categories":[{"name":"后端开发","slug":"后端开发","permalink":"http://www.wanghongbin.top/categories/后端开发/"}],"tags":[{"name":"Spring Data JPA","slug":"Spring-Data-JPA","permalink":"http://www.wanghongbin.top/tags/Spring-Data-JPA/"}]},{"title":"Hexo博客主题pure修改记录","slug":"Hexo博客主题pure修改记录","date":"2017-12-13T03:36:09.000Z","updated":"2018-01-01T13:41:25.295Z","comments":true,"path":"2017/12/13/Hexo博客主题pure修改记录/","link":"","permalink":"http://www.wanghongbin.top/2017/12/13/Hexo博客主题pure修改记录/","excerpt":"","text":"配置文件说明在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。为了描述方便，在以下说明中，将前者称为站点配置文件， 后者称为主题配置文件。启用pure主题安装主题1git clone https://github.com/cofess/hexo-theme-pure.git themes/pure打开站点配置文件，找到theme字段，将其值更改为 pure。1theme: next更新主题12cd themes/puregit pull到此，主题安装完成。然后启动Hexo服务验证主题是否正确启用。1hexo s使用浏览器访问 http://localhost:4000 ，检查主题是否被启用。主题设定设置语言打开站点配置文件, 将 language 设置成你所需要的语言。建议明确设置你所需要的语言,可选值对应themes\\pure\\languages目录下语言文件，简体中文配置如下：1language: zh-CN设置个人信息头像在themes\\pure\\source\\images 目录下替换图片即可，捐献的二维码同理。个人信息大部分都在 主题配置文件 中设置设置菜单右边导航菜单在主题配置文件中配置12345678910111213141516171819202122# 导航菜单menu: Home: . Archives: archives # 归档 Categories: categories # 分类 Tags: tags # 标签 Repository: repository # github repositories Books: books # 书单 Links: links # 友链 About: about # 关于 # 导航菜单图标（font awesome）menu_icons: enable: true # 是否启用菜单图标 home: fa-dashboard archives: fa-delicious categories: fa-folder tags: fa-tags repository: fa-code books: fa-leanpub links: fa-gg about: fa-coffee添加背景动画背景动画基于canvas，在\\themes\\pure\\layout\\layout.ejs的中面添加1&lt;script type=\"text/javascript\" src=\"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js\"&gt;&lt;/script&gt;站点建立时间这个时间将在站点的底部显示，例如 © 2017。 编辑 主题配置文件，新增字段 since。配置示例：1since: 2017添加404公益页面GitHub Pages有提供制作404页面的指引：Custom 404 Pages。但是自定义404页面仅对绑定顶级域名的项目才起作用，GitHub默认分配的二级域名是不起作用的，使用hexo server在本机调试也是不起作用的。使用方法：新建 404.html 页面，放到主题的 source 目录下，内容如下：123456789101112131415161718&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" /&gt; &lt;meta name=\"robots\" content=\"all\" /&gt; &lt;meta name=\"robots\" content=\"index,follow\"/&gt; &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\"&gt;&lt;/head&gt;&lt;body&gt; &lt;script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"/\" homePageName=\"回到我的主页\"&gt; &lt;/script&gt; &lt;script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"&gt;&lt;/script&gt; &lt;script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;阅读次数统计本来想用leancloud来统计，因为不蒜子不能管理相关博文的阅读量，但是配置完leancloud会报错~..~只能选用不蒜子，在主题配置文件 中把busuanzi设置为true即可：123pv: busuanzi: enable: true # 不蒜子统计常用插件及用法hexo-adminGithub：https://github.com/jaredly/hexo-admin简介：可以直接在网页端创建、编辑markdown文章内容，并将内容发布到_posts里。最方便的是可以很方便的给文章加标题、分类、打标签。安装和使用：安装这个插件需要升级npm，先升级1npm install -g npm然后安装1npm install --save hexo-admin配置：在站点配置文件 _config.yml中添加1234admin: username: myfavoritename password_hash: be121740bf988b2225a313fa1f107ca1 secret: a secret something这个配置可以直接在admin Settings &gt; Setup authentification 页面中输入数据获取，secret是用于产生cookie值的。hexo-doubanGithub：https://github.com/mythsman/hexo-douban简介：为博客添加豆瓣书单和豆瓣电影。（不支持分页，数据大网络差有可能出现超时错误）安装：1npm install hexo-douban --save配置：在站点配置文件 _config.yml中添加12345678douban: user: 豆瓣个性域名 book: title: &apos;This is my book title&apos; quote: &apos;This is my book quote&apos; movie: title: &apos;This is my movie title&apos; quote: &apos;This is my movie quote&apos;在主题配置文件 中修改menu12345menu: Home: / Archives: /archives Books: /books #This is your books page Movies: /movies #This is your movies pagehexo-wordcountGithub：https://github.com/willin/hexo-wordcount简介：为文章添加文章字数统计、文章预计阅读时间安装：1npm install hexo-wordcount --save配置：在主题配置文件 中设置为true：12345# wordcountpostCount: enable: true wordcount: true # 文章字数统计 min2read: true # 阅读时长预计hexo-autonofollowGithub：https://github.com/liuzc/hexo-autonofollow简介：自动为站外链接添加nofollow属性安装：1npm install hexo-autonofollow --save配置：在站点配置文件_config.yml中添加12345nofollow: enable: true exclude: - exclude1.com - exclude2.comenable - 是否启用exclude - 排除域名hexo-generator-feedGithub：https://github.com/hexojs/hexo-generator-feed简介：RSS的生成插件，你可以在配置显示你站点的RSS，文件路径\\atom.xml。安装：1npm install hexo-generator-feed --save配置：在站点配置文件_config.yml中添加123456feed: type: atom path: atom.xml limit: 20 hub: content:type - Feed type. (atom/rss2)path - Feed path. (Default: atom.xml/rss2.xml)limit - Maximum number of posts in the feed (Use 0 or false to show all posts)hub - URL of the PubSubHubbub hubs (Leave it empty if you don’t use it)content - (optional) set to ‘true’ to include the contents of the entire post in the feed.hexo-generator-sitemapGithub：https://github.com/hexojs/hexo-generator-sitemap简介：生成博客的sitemap。安装：1npm install hexo-generator-sitemap --save配置：在站点配置文件_config.yml中添加12sitemap: path: sitemap.xmlhexo-generator-baidu-sitemapGithub：https://github.com/coneycode/hexo-generator-baidu-sitemap简介：生成博客的sitemap（针对百度）。安装：1install hexo-generator-baidu-sitemap --save配置：在站点配置文件_config.yml中添加12baidusitemap:path: baidusitemap.xmlhexo-generator-json-contentGithub：https://github.com/alexbruno/hexo-generator-json-content简介：用于生成静态站点数据，提供搜索功能的数据源。安装：1npm install hexo-generator-json-content --save配置：在站点配置文件_config.yml中添加1234567jsonContent: ignore: - path/to/a/page - url/to/one/post - an-entire-category - specific.file - .ext # a file extensionhexo-neatGithub：https://github.com/rozbo/hexo-neat简介：自动压缩html、css、js代码安装：1npm install hexo-neat --save配置：在站点配置文件_config.yml中添加123456789101112131415neat_enable: trueneat_html: enable: ture exclude:neat_css: enable: true exclude: - &apos;*.min.css&apos;neat_js: enable: true mangle: true output: compress: exclude: - &apos;*.min.js&apos;参考http://theme-next.iissnan.com/getting-started.htmlhttps://github.com/cofess/hexo-theme-pure/blob/master/README.cn.mdhttp://blog.cofess.com/2017/08/16/comon-plugins-and-usage-of-hexo-blog.html","categories":[{"name":"技术杂记","slug":"技术杂记","permalink":"http://www.wanghongbin.top/categories/技术杂记/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://www.wanghongbin.top/tags/Hexo/"}]},{"title":"使用Hexo+github搭建个人博客","slug":"使用Hexo+github搭建个人博客","date":"2017-12-10T03:36:09.000Z","updated":"2018-01-01T13:38:39.916Z","comments":true,"path":"2017/12/10/使用Hexo+github搭建个人博客/","link":"","permalink":"http://www.wanghongbin.top/2017/12/10/使用Hexo+github搭建个人博客/","excerpt":"","text":"安装Hexo安装node.js，安装git for windows。所有必备的应用程序安装完成后，创建一个文件夹（用来存放所有blog的东西），然后在该文件夹下使用 npm 安装 Hexo。（所有命令建议使用git的终端来执行）1npm install -g hexo-cli过程有点慢以为没反应失败，其实一直在安装，建议切换npm镜像1npm config set registry &quot;https://registry.npm.taobao.org&quot;设置淘宝镜像源后，很快就安装完毕了。安装 Hexo 完成后，请执行下列命令，Hexo 将会在该文件夹中新建所需要的文件。12hexo init npm install到此，Hexo安装完成。hexo常用命令常见命令1234567hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）hexo deploy #部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本缩写：1234hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy组合命令：12hexo s -g #生成并本地预览hexo d -g #生成并上传Github Pages设置什么是Github PagesGitHub Pages 本用于介绍托管在GitHub的项目，不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。每个帐号只能有一个仓库来存放个人主页，而且仓库的名字必须是yourgithubname.github.io，这是特殊的命名约定。你可以通过http://yourgithubname.github.io 来访问你的个人主页。需要注意的个人主页的网站内容是在master分支下的。创建Github Pages在github创建了一个repo叫做 hombinwong.github.io. 创建完成之后，需要有一次提交(git commit)操作，然后就可以通过链接http://hombinwong.github.io/ 访问了。Hexo搭桥到github首先需要明白部署到github的原理。之前在Github上创建的那个特别的仓库（hombinwong.github.io）一个最大的特点就是其master中的html静态文件，可以通过链接http://hombinwong.github.io来直接访问。Hexo -g 会生成一个静态网站（第一次会生成一个public目录），这个静态文件可以直接访问。需要将hexo生成的静态网站，提交(git commit)到github上。配置SHH Key如果你之前已经配置好git个人信息，请跳过这一个步骤设置Git的user name和email：(如果是第一次的话)12git config --global user.name &quot;yourname&quot;git config --global user.email &quot;your email&quot;生成密钥1ssh-keygen -t rsa -C &quot;your email&quot;连续三个回车，生成密钥，最后得到了两个文件：id_rsa和id_rsa.pub（默认存储路径是：C:\\Users\\Administrator.ssh）。打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key。将id_rsa.pub文件里的key粘贴到key那里，title随便填，保存。配置Deployment打开 站点配置文件_config.yml，找到deploy，然后按照如下修改：（PS:如果要配多个deploy，type前面加-）1234deploy: type: git repo: git@github.com:yourname/yourname.github.io.git branch: master比如我的仓库的地址是hombinwong.github.io，所以配置如下：12345deploy:- type: git repository: git@github.com:hombinwong/hombinwong.github.io.git branch: master- type: baidu_url_submitter ## 推送到百度搜索安装部署到github的插件：1npm install hexo-deployer-git --save执行命令(建议每次都按照如下步骤部署)：12hexo ghexo d在浏览器中输入http://yourgithubname.github.io就可以看到你的个人博客。绑定个人域名当然，你不绑定域名肯定也是可以的，就用默认的 yourgithubname.github.io 来访问，如果你想更个性一点，想拥有一个属于自己的域名，那也是OK的。首先注册一个域名，域名注册推荐去阿里云，本来想用.me域名，不过现在这些非主流的域名工信部还没有纳入备案的条件，如目前的.online,.xyz,.me等都不能备案。如果有需要可以绑定国外服务器，这样就不需要备案了，比如godaddy。绑定域名分2种情况：带www和不带www的。域名配置最常见有2种方式，CNAME和A记录，CNAME填写域名，A记录填写IP，由于不带www方式只能采用A记录，所以必须先ping一下yourgithubname.github.io的IP，然后到你的域名DNS设置页，将A记录指向你ping出来的IP，将CNAME指向yourgithubname.github.io，这样可以保证无论是否添加www都可以访问，如下：然后到你的Hexo/source目录新建一个名为CNAME的文件（无后缀），里面填写你的域名，加不加www看你自己喜好，因为经测试：如果你填写的是没有www的，比如 wanghongbin.top，那么无论是访问 http://www.wanghongbin.top 还是 http://wanghongbin.top，都会自动跳转到 http://wanghongbin.top如果你填写的是带www的，比如 www.wanghongbin.top ，那么无论是访问 http://www.wanghongbin.top还是 http://wanghongbin.top，都会自动跳转到 http://www.wanghongbin.top另外说一句，在你绑定了新域名之后，原来的yourgithubname.github.io并没有失效，而是会自动跳转到你的新域名。发表博客写博客定位到我们的hexo根目录，执行命令：1hexo new &apos;my-first-blog&apos;然后你就可以在source/_posts路径下看到生成的相关md文件。我们只需要打开这个文件就可以开始写博客了，默认生成如下内容：当然你也可以直接自己新建md文件，用这个命令的好处是帮我们自动生成了时间。关于具体的文章编辑可以看下官网的介绍。让博文列表不显示全部内容默认情况下，生成的博文目录会显示全部的文章内容，如何设置文章摘要的长度呢？在合适的位置加上&lt;!--more--&gt;即可。例如：写博客工具markdown语法参考markdown。markdown编辑器推荐一个极致简洁的：Typora。图床，推荐七牛+MPic-图床神器 组合。参考https://hexo.io/zh-cn/docs/index.html","categories":[{"name":"技术杂记","slug":"技术杂记","permalink":"http://www.wanghongbin.top/categories/技术杂记/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://www.wanghongbin.top/tags/Hexo/"}]}]}